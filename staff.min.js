import{initializeApp}from"https://www.gstatic.com/firebasejs/12.3.0/firebase-app.js";import{getAuth,onAuthStateChanged}from"https://www.gstatic.com/firebasejs/12.3.0/firebase-auth.js";import{getFirestore,doc,getDoc,where,collection,getDocs,query,orderBy,updateDoc}from"https://www.gstatic.com/firebasejs/12.3.0/firebase-firestore.js";const firebaseConfig={apiKey:"AIzaSyCT1Zb6b9qBDxa2nrqNu_6cSJ6jCKfq4yY",authDomain:"niapay-carwash.firebaseapp.com",projectId:"niapay-carwash",storageBucket:"niapay-carwash.appspot.com",messagingSenderId:"994223696529",appId:"1:994223696529:web:97e8e7807cc7338878ed30",measurementId:"G-NKDCNQZND5"},app=initializeApp(firebaseConfig),auth=getAuth(app),db=getFirestore(app),staffNameEl=document.getElementById("staffName"),jobsContainer=document.getElementById("jobsContainer"),loader=document.getElementById("loader");let currentStaffName="";async function loadJobs(){loader.classList.remove("hidden");try{const t=query(collection(db,"customer"),orderBy("createdAt","desc")),e=await getDocs(t),o=[];e.forEach(t=>{const e=t.data();"Pending"!==e.status&&"In Progress"!==e.status||o.push({id:t.id,...e})}),renderJobs(o)}catch(t){console.error("Error loading jobs:",t)}finally{loader.classList.add("hidden")}}function renderJobs(t){jobsContainer.innerHTML="",0!==t.length?t.forEach(t=>{const e=t.services.map(t=>`<div class="service-item"><span>${t.name}</span><span>Ksh ${t.price}</span></div>`).join(""),o=document.createElement("div");o.classList.add("job-card"),o.innerHTML=`\n      <div class="job-header">\n        <div>\n          <span class="job-plate"><strong>Plate:</strong> ${t.plate}</span><br>\n          <span class="job-uuid"><strong>Job UUID:</strong> ${t.jobUUID}</span>\n        </div>\n        <span class="job-status ${t.status.replace(" ","-")}">${t.status}</span>\n      </div>\n\n      <div class="job-details">\n        <p><strong>Model:</strong> ${t.model}</p>\n        <p><strong>Color:</strong> ${t.color}</p>\n        <p><strong>Phone:</strong> ${t.phone}</p>\n        <p><strong>Payment:</strong> ${t.payment}</p>\n\n        <div class="services">\n          <strong>Services:</strong>\n          ${e}\n        </div>\n\n        <p style="margin-top:0.5rem;"><strong>Total:</strong> Ksh ${t.total}</p>\n        ${t.assignedTo?`<p><strong>Assigned To:</strong> ${t.assignedTo}</p>`:""}\n      </div>\n\n      <button class="take-btn" data-uuid="${t.jobUUID}">\n        ${"Pending"===t.status?"Take Job":"Finish"}\n      </button>\n    `;const s=o.querySelector(".take-btn");s.addEventListener("click",async()=>{const e=s.dataset.uuid;"Pending"===t.status?await takeJob(e,o):"In Progress"===t.status&&await finishJob(e,o)}),jobsContainer.appendChild(o)}):jobsContainer.innerHTML='<p style="text-align:center; color:#777;">No active jobs at the moment.</p>'}async function takeJob(t,e){try{const o=collection(db,"customer"),s=query(o,where("jobUUID","==",t)),n=await getDocs(s);if(n.empty)return void console.error("❌ Job not found:",t);const a=n.docs[0],r=doc(db,"customer",a.id);await updateDoc(r,{status:"In Progress",assignedTo:currentStaffName,startedAt:(new Date).toISOString()});const c=e.querySelector(".job-status");c.textContent="In Progress",c.className="job-status In-Progress";const i=document.createElement("p");i.innerHTML=`<strong>Assigned To:</strong> ${currentStaffName}`,e.querySelector(".job-details").appendChild(i);const d=e.querySelector(".take-btn");d.textContent="Finish",d.onclick=()=>finishJob(t,e),console.log(`✅ Job ${t} assigned to ${currentStaffName}`)}catch(t){console.error("❌ Error taking job:",t)}}async function finishJob(t,e){try{const o=collection(db,"customer"),s=query(o,where("jobUUID","==",t)),n=await getDocs(s);if(n.empty)return void console.error("❌ Job not found:",t);const a=n.docs[0],r=doc(db,"customer",a.id);await updateDoc(r,{status:"Completed",completedAt:(new Date).toISOString()});const c=e.querySelector(".job-status");c.textContent="Completed",c.className="job-status Completed";const i=e.querySelector(".take-btn");i.disabled=!0,i.textContent="Completed ✅",i.style.backgroundColor="#b89360",i.style.cursor="not-allowed",console.log(`✅ Job ${t} marked as Completed`)}catch(t){console.error("❌ Error finishing job:",t)}}onAuthStateChanged(auth,async t=>{if(t){const e=await getDoc(doc(db,"users",t.uid));if(e.exists()){const t=e.data();currentStaffName=t.name,staffNameEl.textContent=`Welcome, ${t.name}`,loadJobs()}else staffNameEl.textContent="Staff Member"}else window.location.href="login.html"});